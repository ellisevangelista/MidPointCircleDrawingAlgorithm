/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package midpointgeneratingcalculator;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import org.apache.commons.lang3.ArrayUtils;

/**
 *
 * @author ellisevangelista
 */

public class MidPointMain extends javax.swing.JFrame {
   static double radiusVal, xCenterVal, yCenterVal, r;
   static ArrayList<Double> xArrayF, yArrayF, rpF;
   //static int xN, yN, xS, yS, xE, yE, xW, yW;
   
    public MidPointMain() {
        initComponents();
    }
    
   public Map<String, ArrayList<Double>> Map(){
       Map<String, ArrayList<Double>> map = new HashMap();
       map.put("xValues", xArrayF);
       map.put("yValues", yArrayF);
       return map;
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calculate = new javax.swing.JToggleButton();
        radius = new javax.swing.JTextField();
        xCenter = new javax.swing.JTextField();
        yCenter = new javax.swing.JTextField();
        javax.swing.JLabel radiusLabel = new javax.swing.JLabel();
        javax.swing.JLabel centerLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        javax.swing.JButton plot = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("midpointgeneratingcalculator/Bundle"); // NOI18N
        calculate.setText(bundle.getString("MidPointMain.calculate.text")); // NOI18N
        calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateActionPerformed(evt);
            }
        });

        radius.setText(bundle.getString("MidPointMain.radius.text")); // NOI18N
        radius.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radiusActionPerformed(evt);
            }
        });

        xCenter.setText(bundle.getString("MidPointMain.xCenter.text")); // NOI18N
        xCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xCenterActionPerformed(evt);
            }
        });

        yCenter.setText(bundle.getString("MidPointMain.yCenter.text")); // NOI18N
        yCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yCenterActionPerformed(evt);
            }
        });

        radiusLabel.setText(bundle.getString("MidPointMain.radiusLabel.text")); // NOI18N

        centerLabel.setText(bundle.getString("MidPointMain.centerLabel.text")); // NOI18N

        plot.setText(bundle.getString("MidPointMain.plot.text")); // NOI18N
        plot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(radius, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(xCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(radiusLabel)
                    .addComponent(centerLabel)
                    .addComponent(calculate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(plot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(radiusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(centerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xCenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yCenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(calculate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(plot)
                .addContainerGap(128, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    public void mapOutput() {       
        Object[][] data = new String[(int)r][4];
        String[] columnNames = {"n", "X", "Y", "R"};
        // x and y values from ArrayList -> data , creates a table
        for (int i = 0; i < (int)r; i++) {
            for (int j = 0; j < 4; j++) {
                switch (j) {
                    case 0:
                        data[i][j] = Integer.toString(i);                        
                        break;
                    case 1:
                        data[i][j] = xArrayF.get(i).toString();                       
                        break;
                    case 2:
                        data[i][j] = yArrayF.get(i).toString();                       
                        break;
                    default:
                        data[i][j] = rpF.get(i).toString();                        
                        break;
                }
            }
        } 
        JTable table = new JTable(data, columnNames);
        jScrollPane1.setViewportView(table);
    }
    
    public class Point
    {
      private int x,y;
      public int getX() { return x;}
      public int getY() { return y;}
      public void setX(int x) { this.x=x;}
      public void setY(int y) { this.y=y;}

      public Point() {}
      public Point(int x,int y) { this.x=x; this.y=y;}
    }
    
   @SuppressWarnings("empty-statement")
    private void calculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateActionPerformed
        radiusVal = Double.parseDouble(radius.getText());
        xCenterVal = Double.parseDouble(xCenter.getText());
        yCenterVal = Double.parseDouble(yCenter.getText());
        
        r = radiusVal + 1;
        double p0 = (1.25 - radiusVal);
        Double rp[] = new Double[(int)r];
        Double xArray[] = new Double[(int)r];
        Double yArray[] = new Double[(int)r];

        for (int i = 0; i < (int)r; i++) {
            if (i == 0){
                xArray[i] = 0.0;
                yArray[i] = radiusVal;
                rp[i] = p0;
            }
            if(i >= 1){
                if (rp[i-1] < 0) {
                    xArray[i] = xArray[i-1] + 1;
                    yArray[i] = yArray[i-1]; 
                    rp[i] = rp[i-1] + 2*xArray[i] + 1;
                }
                else{
                    xArray[i] = xArray[i-1] + 1;
                    yArray[i] = yArray[i-1] - 1;
                    rp[i] = rp[i-1] + 2*xArray[i] - 2*yArray[i] + 1;
                }
           }
        }      
//        int width = (int)radiusVal;
//           int height = (int)radiusVal;
//          
//           xS = (int)xCenterVal;
//           yS = (int)yCenterVal - height;
//           
//           xN = (int)xCenterVal;
//           yN = (int)yCenterVal + height;
//           
//           xE = (int)xCenterVal - width;
//           yE = (int)yCenterVal;
//           
//           xW = (int)xCenterVal + width;
//           yW = (int)yCenterVal;
        
        for (int i = 0; i < (int)r; i++) {     
            xArray[i] = xArray[i] + xCenterVal;
            yArray[i] = yArray[i] + yCenterVal;
            
//            double[] xArrayD = ArrayUtils.toPrimitive(xArray);
//            double[] yArrayD = ArrayUtils.toPrimitive(yArray);
//            
//            ArrayList<Point> points = new ArrayList<>();
//            points.add(new Point((int)xArrayD[i], (int)yArrayD[i]));
//            //points.stream().forEach((p)-> System.out.print("(" + p.x +"," + p.y + ")"));
//            points.add(new Point(xN, yN));
//            points.add(new Point(xS, yS));
//            points.add(new Point(xE, yE));
//            points.add(new Point(xW, yW));
            
        }
        xArrayF = new ArrayList<>(); 
        xArrayF.addAll(Arrays.asList(xArray));
        yArrayF = new ArrayList<>(); 
        yArrayF.addAll(Arrays.asList(yArray));
        rpF = new ArrayList<>(); 
        rpF.addAll(Arrays.asList(rp));
        mapOutput();
    }//GEN-LAST:event_calculateActionPerformed

    private void yCenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yCenterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yCenterActionPerformed

    private void xCenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xCenterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_xCenterActionPerformed

    private void radiusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radiusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radiusActionPerformed

    private void plotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotActionPerformed
        MidPoint_PlotW m = new MidPoint_PlotW();
        m.Plot();
    }//GEN-LAST:event_plotActionPerformed
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (doubleroduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MidPointMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MidPointMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MidPointMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MidPointMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MidPointMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JToggleButton calculate;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTextField radius;
    public javax.swing.JTextField xCenter;
    public javax.swing.JTextField yCenter;
    // End of variables declaration//GEN-END:variables
}
